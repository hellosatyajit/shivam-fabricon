---
import type { JSX } from "astro";

interface Industry {
  src?: string;
}

interface InvestorsProps {
  title?: string;
  description?: string;
  image?: Industry[] | string; // Can be an array or a string
}

const { data }: { data?: InvestorsProps[] } = Astro.props;

let isModalOpen = false;
let currentImageIndex = 0;
let imagesInModal: string[] = [];

// Function to open the modal
function openModal(images: string[], index: number) {
  isModalOpen = true;
  imagesInModal = images;
  currentImageIndex = index;
}

// Function to close the modal
function closeModal() {
  isModalOpen = false;
}

// Function to go to the next image
function nextImage() {
  if (currentImageIndex < imagesInModal.length - 1) {
    currentImageIndex++;
  } else {
    currentImageIndex = 0; // loop back to the first image
  }
}

// Function to go to the previous image
function prevImage() {
  if (currentImageIndex > 0) {
    currentImageIndex--;
  } else {
    currentImageIndex = imagesInModal.length - 1; // loop back to the last image
  }
}
---

<section class="py-12">
  <div class="container mx-auto px-4 sm:px-6 lg:px-14 space-y-6">
    {data?.map((item, index) => (
      <div key={index} class="cursor-pointer">
        <!-- Title and Description -->
        <div class="flex flex-col lg:flex-row justify-between items-center mb-8">
          <h2 class="lg:w-64 text-4xl lg:text-5xl font-bold text-gray-900 mb-4">
            {item.title}
          </h2>
          <p class="text-gray-600 text-center font-semibold lg:text-left lg:max-w-lg">
            {item.description}
          </p>
        </div>

        <!-- Image Gallery -->
        <div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {Array.isArray(item.image) ? (
            item.image.map((Img, imgIndex) => (
              <div
                key={imgIndex}
                class="flex items-center justify-center border bg-gray-50 rounded-lg shadow-md hover:shadow-lg transition-shadow"
                onClick={() => openModal(item.image.map((img) => img.src || ""), imgIndex)}
              >
                <img
                  src={Img.src}
                  alt={`Image for ${item.title}`}
                  class="object-cover rounded-lg w-full hover:scale-105 transition-transform duration-300"
                />
              </div>
            ))
          ) : (
            <div
              class="flex items-center justify-center p-2 border bg-gray-50 rounded-lg shadow-md hover:shadow-lg transition-shadow"
              onClick={() => openModal([item.image as string], 0)}
            >
              <img
                src={item.image as string}
                alt={`Image for ${item.title}`}
                class="object-cover rounded-2xl w-full h-64 lg:h-96 hover:scale-105 transition-transform duration-300"
              />
            </div>
          )}
        </div>
      </div>
    ))}
  </div>

  <!-- Modal for fullscreen image -->
  {isModalOpen && (
    <div
      class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50"
      onClick={() => closeModal()}
    >
      <div
        class="relative bg-white rounded-lg p-4 max-w-full max-h-screen"
        onClick={(e) => e.stopPropagation()}
      >
        <!-- Close Button -->
        <button
          class="absolute top-4 right-4 text-white text-2xl"
          onClick={() => closeModal()}
        >
          ✕
        </button>

        <!-- Left Arrow -->
        <button
          class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white text-4xl"
          onClick={() => prevImage()}
        >
          ◀
        </button>

        <!-- Fullscreen Image -->
        <img
          src={imagesInModal[currentImageIndex]}
          alt={`Image for ${data[currentImageIndex]?.title}`}
          class="rounded-lg max-w-full max-h-screen object-contain"
        />

        <!-- Right Arrow -->
        <button
          class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white text-4xl"
          onClick={() => nextImage()}
        >
          ▶
        </button>
      </div>
    </div>
  )}
</section>
